<?xml version="1.0" encoding="utf-8"?> 
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
  <!-- Vector2< float > -->
  <Type Name="Framework::VectorBase&lt;float,2&gt;">
    <Intrinsic Name="Dot" Expression="data[0]*data[0]+data[1]*data[1]"></Intrinsic>
    <Intrinsic Name="IsNormalized" Expression="Dot()&gt;0.99980000000500002&amp;Dot()&lt;1.0001999999950000"></Intrinsic>
    <DisplayString IncludeView="simple">&lt;{data[0],g}, {data[1],g}&gt;</DisplayString>
    <DisplayString ExcludeView="simple" Condition="IsNormalized()">[x]: {data[0],g} [y]: {data[1],g} (normalized)</DisplayString>
    <DisplayString ExcludeView="simple" Condition="!IsNormalized()">[x]: {data[0],g} [y]: {data[1],g}</DisplayString>
  </Type>

  <!-- Vector2< double > -->
  <Type Name="Framework::VectorBase&lt;double,2&gt;">
    <Intrinsic Name="Dot" Expression="data[0]*data[0]+data[1]*data[1]"></Intrinsic>
    <Intrinsic Name="IsNormalized" Expression="Dot()&gt;0.99999999999998002&amp;Dot()&lt;1.0000000000000200"></Intrinsic>
    <DisplayString IncludeView="simple">&lt;{data[0],h}, {data[1],h}&gt;</DisplayString>
    <DisplayString ExcludeView="simple" Condition="IsNormalized()">[x]: {data[0],h} [y]: {data[1],h} (normalized)</DisplayString>
    <DisplayString ExcludeView="simple" Condition="!IsNormalized()">[x]: {data[0],h} [y]: {data[1],h}</DisplayString>
  </Type>

  <!-- Vector2< int > -->
  <Type Name="Framework::VectorBase&lt;int,2&gt;">
    <DisplayString IncludeView="simple">&lt;{data[0],d}, {data[1],d}&gt;</DisplayString>
    <DisplayString ExcludeView="simple">[x]: {data[0],d} [y]: {data[1],d}</DisplayString>
  </Type>
  
  <!-- Vector3< float > -->
  <Type Name="Framework::VectorBase&lt;float,3&gt;">
    <Intrinsic Name="Dot" Expression="data[0]*data[0]+data[1]*data[1]+data[2]*data[2]"></Intrinsic>
    <Intrinsic Name="IsNormalized" Expression="Dot()&gt;0.99980000000500002&amp;Dot()&lt;1.0001999999950000"></Intrinsic>
    <DisplayString IncludeView="simple">&lt;[x]: {data[0],g} [y]: {data[1],g} [z]: {data[2],g} &gt;</DisplayString>
    <DisplayString ExcludeView="simple" Condition="IsNormalized()">[x]: {data[0],g} [y]: {data[1],g} [z]: {data[2],g} (normalized)</DisplayString>
    <DisplayString ExcludeView="simple" Condition="!IsNormalized()">[x]: {data[0],g} [y]: {data[1],g} [z]: {data[2],g}</DisplayString>
  </Type>

  <!-- Vector3< double > -->
  <Type Name="Framework::VectorBase&lt;double,3&gt;">
    <Intrinsic Name="Dot" Expression="data[0]*data[0]+data[1]*data[1]+data[2]*data[2]"></Intrinsic>
    <Intrinsic Name="IsNormalized" Expression="Dot()&gt;0.99999999999998002&amp;Dot()&lt;1.0000000000000200"></Intrinsic>
    <DisplayString IncludeView="simple">&lt;[x]: {data[0],h} [y]: {data[1],h} [z]: {data[2],h} &gt;</DisplayString>
    <DisplayString ExcludeView="simple" Condition="IsNormalized()">[x]: {data[0],h} [y]: {data[1],h} [z]: {data[2],h} (normalized)</DisplayString>
    <DisplayString ExcludeView="simple" Condition="!IsNormalized()">[x]: {data[0],h} [y]: {data[1],h} [z]: {data[2],h}</DisplayString>
  </Type>

  <!-- Vector3< int > -->
  <Type Name="Framework::VectorBase&lt;int,3&gt;">
    <DisplayString IncludeView="simple">&lt;{data[0],d}, {data[1],d} {data[2],d}&gt;</DisplayString>
    <DisplayString ExcludeView="simple">[x]: {data[0],d} [y]: {data[1],d} [z]: {data[2],d}</DisplayString>
  </Type>
  
  <!-- Vector4< float > -->
  <Type Name="Framework::VectorBase&lt;float,4&gt;">
    <Intrinsic Name="Dot" Expression="data[0]*data[0]+data[1]*data[1]+data[2]*data[2]+data[3]*data[3]"></Intrinsic>
    <Intrinsic Name="IsNormalized" Expression="Dot()&gt;0.99980000000500002&amp;Dot()&lt;1.0001999999950000"></Intrinsic>
    <DisplayString IncludeView="simple">&lt;{data[0],g}, {data[1],g}, {data[2],g}, {data[3],g}&gt;</DisplayString>
    <DisplayString ExcludeView="simple" Condition="IsNormalized()">{data[0],g} [y]: {data[1],g} [z]: {data[2],g} [w]: {data[3],g} (normalized)</DisplayString>
    <DisplayString ExcludeView="simple" Condition="!IsNormalized()">[x]: {data[0],g} [y]: {data[1],g} [z]: {data[2],g} [w]: {data[3],g}</DisplayString>
  </Type>

  <!-- Vector4< double > -->
  <Type Name="Framework::VectorBase&lt;double,4&gt;">
    <Intrinsic Name="Dot" Expression="data[0]*data[0]+data[1]*data[1]+data[2]*data[2]+data[3]*data[3]"></Intrinsic>
    <Intrinsic Name="IsNormalized" Expression="Dot()&gt;0.99999999999998002&amp;Dot()&lt;1.0000000000000200"></Intrinsic>
    <DisplayString IncludeView="simple">&lt;{data[0],h}, {data[1],h}, {data[2],h}, {data[3],h}&gt;</DisplayString>
    <DisplayString ExcludeView="simple" Condition="IsNormalized()">{data[0],h} [y]: {data[1],h} [z]: {data[2],h} [w]: {data[3],h} (normalized)</DisplayString>
    <DisplayString ExcludeView="simple" Condition="!IsNormalized()">[x]: {data[0],h} [y]: {data[1],h} [z]: {data[2],h} [w]: {data[3],h}</DisplayString>
  </Type>

  <!-- Vector4< int > -->
  <Type Name="Framework::VectorBase&lt;int,4&gt;">
    <DisplayString IncludeView="simple">&lt;{data[0],d}, {data[1],d} {data[2],d} {data[3],d}&gt;</DisplayString>
    <DisplayString ExcludeView="simple">[x]: {data[0],d} [y]: {data[1],d} [z]: {data[2],d} [w]: {data[3],d}</DisplayString>
  </Type>
    
  <!-- Color3 -->
  <Type Name="Framework::Color3;">
    <DisplayString IncludeView="simple">&lt;{data[0],g}, {data[1],g}, {data[2],g}&gt;</DisplayString>
    <DisplayString ExcludeView="simple">[r]: {data[0],g} [g]: {data[1],g} [b]: {data[2],g}</DisplayString>
  </Type>
  
  <!-- Color4 -->
  <Type Name="Framework::Color4;">
    <DisplayString IncludeView="simple">&lt;{data[0],g}, {data[1],g}, {data[2],g}, {data[3],g}&gt;</DisplayString>
    <DisplayString ExcludeView="simple">[r]: {data[0],g} [g]: {data[1],g} [b]: {data[2],g} [a]: {data[3],g}</DisplayString>
  </Type>

   <!-- Degrees< Float > -->
  <Type Name="Framework::Math::Degrees&lt;float&gt;">
    <DisplayString IncludeView="simple">{value,g}° ({value * 3.14159274f / 180.0f,g} radians)</DisplayString>
    <DisplayString ExcludeView="simple">{value,g}° ({value * 3.14159274f / 180.0f,g} radians)</DisplayString>
  </Type>
  
  <!-- Degrees< Double > -->
  <Type Name="Framework::Math::Degrees&lt;double&gt;">
    <DisplayString IncludeView="simple">{value,h}° ({value * 3.1415926535897931 / 180.0,h} radians)</DisplayString>
    <DisplayString ExcludeView="simple">{value,h}° ({value * 3.1415926535897931 / 180.0,h} radians)</DisplayString>
  </Type>
  
  <!--Radians< Float > -->
  <Type Name="Framework::Math::Radians&lt;float&gt;">
    <DisplayString IncludeView="simple">{value,g} radians ({180.0f * value / 3.14159274f,g}°)</DisplayString>
    <DisplayString ExcludeView="simple">{value,g} radians ({180.0f * value / 3.14159274f,g}°)</DisplayString>
  </Type>
  
  <!--Radians< Double > -->
  <Type Name="Framework::Math::Radians&lt;double&gt;">
    <DisplayString IncludeView="simple">{value,h} radians ({180.0 * value / 3.1415926535897931,h}°)</DisplayString>
    <DisplayString ExcludeView="simple">{value,h} radians ({180.0 * value / 3.1415926535897931,h}°)</DisplayString>
  </Type>
  
  <!-- Quaternion -->
  <Type Name="Framework::QuaternionBase&lt;*&gt;">
    <Intrinsic Name="Dot" Expression="w*w+xyz.data[0]*xyz.data[0]+xyz.data[1]*xyz.data[1]+xyz.data[2]*xyz.data[2]"></Intrinsic>
    <Intrinsic Name="IsNormalized" Expression="Dot()&gt;0.99980000000500002&amp;Dot()&lt;1.0001999999950000"></Intrinsic>
    <DisplayString IncludeView="simple">&lt;{w,g} {xyz}&gt;</DisplayString>
    <DisplayString ExcludeView="simple" Condition="IsNormalized()">[x]: {xyz.data[0],g} [y]: {xyz.data[1],g} [z]: {xyz.data[2],g} [w]: {w,g} (normalized)</DisplayString>
    <DisplayString ExcludeView="simple" Condition="!IsNormalized()">[x]: {xyz.data[0],g} [y]: {xyz.data[1],g} [z]: {xyz.data[2],g} [w]: {w,g}</DisplayString>
  </Type>
  
  <!-- Matrix -->
  <Type Name="Framework::MatrixBase&lt;*&gt;">
    <DisplayString>{($T1 *)data,[$T2*$T3]nag}</DisplayString>
    <Expand>
      <ArrayItems>
        <Direction>Forward</Direction>
        <Rank>2</Rank>
        <Size>$i == 0 ? $T2 : $T3</Size>
        <ValuePointer>($T1 *)data</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
</AutoVisualizer>